apiVersion: apps/v1
kind: Deployment
metadata:
  name: pipeline-service
  namespace: {{ .Release.Namespace }}
  labels:
        {{- include "pipeline-service.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  progressDeadlineSeconds: 600
  selector:
    matchLabels:
      {{- include "pipeline-service.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: {{.Values.maxUnavailable}}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        app: pipeline-service
        {{- include "pipeline-service.selectorLabels" . | nindent 8 }}
    spec:
      {{ include "pipeline-service.pullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "pipeline-service.serviceAccountName" . }}
      terminationGracePeriodSeconds: 30
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      {{- if .Values.global.database.mongo.installed }}
      - name: wait-for-mongo
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=mongodb-replicaset"
      {{- end }}
      - name: wait-for-timescale
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=timescaledb-single-chart"
      containers:
      - name: pipeline-service
        image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        ports:
          - name: grpc-pms
            containerPort: {{ .Values.service.grpcport }}
            protocol: "TCP"
          - name: http-pms
            containerPort: {{ .Values.service.port }}
            protocol: "TCP"
          - name: grpc-gitsync
            containerPort: {{ .Values.service.gitsyncgrpcport }}
            protocol: "TCP"
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        env:
          {{- include "harnesscommon.dbconnection.redisEnv" (dict "context" .Values.global.database.redis "userVariableName" "EVENTS_FRAMEWORK_REDIS_USERNAME" "passwordVariableName" "EVENTS_FRAMEWORK_REDIS_PASSWORD") | indent 10 }}
          {{- include "harnesscommon.dbconnection.redisEnv" (dict "context" .Values.global.database.redis "userVariableName" "LOCK_CONFIG_REDIS_USERNAME" "passwordVariableName" "LOCK_CONFIG_REDIS_PASSWORD") | indent 10 }}
          {{- include "harnesscommon.dbconnection.mongoEnv" . | indent 10 }}
          - name : TIMESCALE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.timescaleSecret.password.name }}
                key: {{ .Values.timescaleSecret.password.key }}
          - name: MONGO_URI
            value: {{ include "harnesscommon.dbconnection.mongoConnection" (dict "database" "pms-harness" "context" $) }}
          - name : NOTIFICATION_MONGO_URI
            value: {{ include "harnesscommon.dbconnection.mongoConnection" (dict "database" "notifications" "context" $) }}
          - name: TIMESCALEDB_USERNAME
            value: postgres
          - name: TIMESCALE_URI
            value: 'jdbc:postgresql://timescaledb-single-chart.{{ .Release.Namespace }}:5432/harness'
          {{- if .Values.extraEnvVars }}
            {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.lifecycleHooks }}
        lifecycle: {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
        {{- end }}
        {{- if .Values.extraVolumeMounts }}
        volumeMounts:
        {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
        {{- end }} 
        envFrom:
        - configMapRef:
            name: pipeline-service
        {{- toYaml .Values.probes | nindent 8}}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - pipeline-service
            topologyKey: "kubernetes.io/hostname"
      {{- with .Values.affinity }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.extraVolumes }}
      volumes:
      {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.extraVolumes "context" $ ) | nindent 8 }}
      {{- end }}